// import { LitElement } from 'lit';
// import { Interaction } from '../interaction/interaction';

// type Constructor<T> = new (...args: any[]) => T;

// declare class DraggablesInterface {}

// export const DraggablesMixin = <T extends Constructor<LitElement>>(superClass: T, draggablesSelector: string) => {
//   class DraggablesElement extends superClass {
//     override connectedCallback(): void {
//       super.connectedCallback();

//       // for qti-match-interaction the drag interaction can be replace with a qti-match-tabular class
//       // which shows the data in a a tabular way, so no drag drop should be involved then
//       if (this.classList.contains('qti-match-tabular')) return;

//       // pk: COMMENTED THIS OUT, cause this also causes the dropEffect to be 'copy', 
//       // BECAUSE IT THINKS SOMETHING IS GONNE BE DROPPED
//       // disable animation when releasing
//       // document.addEventListener('dragover', (e) => e.preventDefault(), false);

//       const draggables = Array.from(this.querySelectorAll(draggablesSelector));
//       draggables.forEach((draggable) => {
//         draggable.addEventListener('dragstart', (ev: any) => {
//           console.log('dragstart', ev);
//           ev.dataTransfer.setData('text', ev.currentTarget.getAttribute(`identifier`));
//           // pk: this element may by moved to another parent
//           // ev.dataTransfer.effectAllowed = 'move';

//           draggable.setAttribute('dragging', '');
//         });
//         draggable.addEventListener('dragend', (ev: DragEvent) => {
//           ev.preventDefault();
//           // pk: maybe this is the better location to pass to drag-drop-interaction what happend after the drag end
//           // console.log('DRAGEND', ev.dataTransfer.dropEffect);
//           // draggable.dispatchEvent(
//           //   new CustomEvent('dragcomplete', {
//           //     detail: {
//           //       isdropped: ev.dataTransfer.dropEffect !== 'none',
//           //       draggable: draggable,
//           //     },
//           //   })
//           // );

//           draggable.removeAttribute('over');
//           draggable.removeAttribute('dragging');
//         });

//         draggable.setAttribute('qti-draggable', 'true');
//       });
//     }
//   }
//   return DraggablesElement as Constructor<DraggablesInterface> & T;
// };
